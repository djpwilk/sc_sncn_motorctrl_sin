<<<<<<< HEAD
/**
 * \file
 * \brief Main project file
 *
 * Port declarations, etc.
 *
 * \author Martin Schwarz <mschwarz@synapticon.com>
 * \version 0.1 (2012-02-22 1850)
 * \
 */

#ifndef _DC_MOTOR_CONFIG__H_
#define _DC_MOTOR_CONFIG__H_
#pragma once

#define UMOT_MAX 4096
#define TORQUE_INTEGRATOR_MAX  UMOT_MAX*64

#define defENCODER
//#define defHALL

//=========================================================
#define MOTOR_MAXON_EC45
//#define MOTOR_MAXON_EC60

//==========================================================
#ifdef  MOTOR_MAXON_EC45

#define MOTOR_POWER 50
#define POLE_PAIRS	8
#define GEAR_RATIO	26
#define MAX_NOMINAL_SPEED  4000   // in 1/min
#define MAX_NOMINAL_CURRENT  5    // in A

#define defParRpmMotorMax		 6500
#define defParRpmUmotMax	 	11500
#define defParUmotBoost  		   60
#define defParUmotStart 		   70
#define defParAngleUser 		    0
//======== current limits ===============
#define defParRmsLimit			  750  // 66*4 = 264Bits/A
#define defParRmsMaxPwmOff       2000  //
//============ speed_control ============
#define defParHysteresisPercent	    5
#define defParDiffSpeedMax		   20
#define defParUmotIntegralLimit	 2048

#define defParPropGain			   32
#define defParIntegralGain		   32

#define defCurrentFactor            4

#define defParTorquePropGain	   64
#define defParTorqueIntegralGain   64
//-------------------------------------
#define defParEncoderResolution       4000
#define defParEncoderZeroPointPlus     640
#define defParEncoderZeroPointMinus   1600
//-------------------------------------
#define defParRampAcc  			65536/2		 // change to RPM/sec
#define defParRampDec  			65536         //
#define defParRampSmoothFactor 		4     //

#define defParPositionSpeedMax    800   // RPM
#define defParPositionSpeedMin    100   // RPM
#endif
//=====================================================================

//==================================================================
#ifdef  MOTOR_MAXON_EC60

#define MOTOR_POWER 100
#define POLE_PAIRS	7
#define GEAR_RATIO	156
#define MAX_NOMINAL_SPEED  3700   // in 1/min
#define MAX_NOMINAL_CURRENT  5    // in A

#define defParRpmMotorMax		3700
#define defParRpmUmotMax	 	4000
#define defParUmotBoost  		 120
#define defParUmotStart 		 150
#define defParAngleUser 		   0
//======== current limits ===============
#define defParRmsLimit			750   // 66*4 = 264Bits/A
#define defParRmsMaxPwmOff      2000  //

//============ speed_control ============
#define defParEncoderResolution       4000
#define defParEncoderZeroPointPlus     640
#define defParEncoderZeroPointMinus   1100
//-------------------------------------

#define defParHysteresisPercent	    5		// percent
#define defParDiffSpeedMax		   20		// percent
#define defParUmotIntegralLimit	 2048
#define defParPropGain			    8
#define defParIntegralGain		    8
#define defCurrentFactor            1

#define defParTorquePropGain	   32
#define defParTorqueIntegralGain   32
//-------------------------------------
#define defParEncoderResolution 4000
#define defParEncoderZeroPoint   570
//-------------------------------------
#define defParRampAcc  		      8192 		 //  change to RPM/sec
#define defParRampDec  			  8192*2
#define defParRampSmoothFactor 4

#define defParPositionSpeedMax   800   // RPM
#define defParPositionSpeedMin   100   // RPM
#endif
//=============================================================




#endif
=======
/**************************************************************************
 * \file dc_motor_config.h
 *	Motor Control config file
 *
 * Please define your the motor specifications here
 *
 * All these initialisation functions :init_params_struct_all, init_hall and init_qei
 * need to be called to set up the variables for control module, hall sensor and quadrature
 * sensor modules "else operation is not guaranteed"
 *
 * You still need to tune the PI torque control params for your motor individually
 *
 * Copyright 2013, Synapticon GmbH. All rights reserved.
 * Authors:  Pavan Kanajar <pkanajar@synapticon.com> & Martin Schwarz <mschwarz@synapticon.com>
 *
 * All code contained in this package under Synapticon copyright must be
 * licensing for any use from Synapticon. Please contact support@synapticon.com for
 * details of licensing.
 *
 * In the case where this code is a modification of existing code
 * under a separate license, the separate license terms are shown
 * below. The modifications to the code are still covered by the
 * copyright notice above.
 *
 **************************************************************************/

#ifndef __DC_MOTOR_CONFIG__H__
#define __DC_MOTOR_CONFIG__H__

#pragma once

#define POLE_PAIRS	8
#define GEAR_RATIO	156
#define MAX_NOMINAL_SPEED  4000   // in 1/min
#define MAX_NOMINAL_CURRENT  5    // in A
#define QEI_COUNT_MAX (1024 * 4)  // Max count of Quadrature Encoder


/*define control parameters for PI TORQUE controller*/
#define Torque_Kp_n 40                   // Kp = Kp_n/Kp_d
#define Torque_Kp_d 10
#define Torque_Ki_n 4					 // Ki = Ki_n/Ki_d
#define Torque_Ki_d 120
#define Torque_Integral_limit 10000
#define Max_torque_out 1200              // Max_Torque_out = Max Continuous torque * 264 / torque constant

/*define control closing time the controller*/
#define loop_timing 88 					//in USEC_FAST




/*optional PI controller parameters for field control*/
#define Field_Kp_n 25                    // Kp = Kp_n/Kp_d
#define Field_Kp_d 10
#define Field_Ki_n 2					 // Ki = Ki_n/Ki_d
#define Field_Ki_d 100
#define Field_Integral_limit 10000

/* Struct definitions for the Parameters*/
typedef struct S_Torque {
	int Kp_n, Kp_d;    					//Kp = Kp_n/Kp_d
	int Ki_n, Ki_d;						//Ki = Ki_n/Ki_d
	int Integral_limit;
	int Max_torque;
} torq_par;

typedef struct S_Loop_time {
	int delay;
} loop_par;

//optional control parameters
typedef struct S_Field{
	int Kp_n, Kp_d;						//Kp = Kp_n/Kp_d
	int Ki_n, Ki_d;						//Ki = Ki_n/Ki_d
	int Integral_limit;
} field_par;


typedef struct S_Hall {
	int pole_pairs;
} hall_par;

typedef struct S_QEI {
	unsigned max_count;
} qei_par;


/* initialize control loop parameter struct*/
void init_params_struct_all(torq_par &tor, field_par &field, loop_par &loop);

/* initialize hall sensor */
void init_hall(hall_par &h_pole);

/* initialize QEI sensor */
void init_qei(qei_par &q_max);
#endif
>>>>>>> release

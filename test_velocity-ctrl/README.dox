
/**

\page apps
\section test_velocity-ctrl

test_velocity-ctrl.xc illustrates usage of \ref module_ctrl_loops to do velocity control of a motor. Velocity Loop can be closed with position from either HALL sensor/ QEI Sensor or any other position sensor (if a drive server runs on IFM tile).

HW compatibility: 
- \b COM: (not used) 
- \b CORE: C22, C21-DX
- \b IFM: Drive DC 100, Drive DC 300 

It runs \b 7 \b THREADS in parallel. 
- Profile Velocity Client, Velocity Control Loop, PWM Server, Commutation Server, Hall Server, QEI Server, Watchdog Server

It uses \b 2 \b TILES out of the \b CORE module.

	#define TILE_ONE 0
	#define IFM_TILE 3

- TILE_ONE (0 by default). It takes care of the client side functions andcontrol loop. Since these functios do not require any port access, any free \b TILE could run them.
- IFM_TILE (3 by default). It executes the server side functions, controlling the interfaces. These functions need access to the Interface Module (IFM), just the tile that provides access to the \b IFM ports can run these functions.  

\b TILE_ONE:

	on stdcore[TILE_ONE]:
			{
				par
				{

- \b Thread: Profile Velocity Client

	profile_velocity_test(c_velocity_ctrl);	// Test Velocity Profile Mode on slave side

Set new target velocity for the controller. Communication between the profile position client and .... and the threads running on ..... are carried out over channels: ....


- \b Thread: Velocity Control Loop

	{
	ctrl_par velocity_ctrl_params; //Var definition
	filter_par sensor_filter_params;
	hall_par hall_params;
	qei_par qei_params;

	init_velocity_control_param(velocity_ctrl_params); //Initialization
	init_qei_param(qei_params);
	init_hall_param(hall_params);
	init_sensor_filter_param(sensor_filter_params);

	velocity_control(velocity_ctrl_params, sensor_filter_params, hall_params, 
			qei_params, SENSOR_USED, c_hall_p2, c_qei_p2, 
			c_velocity_ctrl, c_commutation_p2); //Control loop
	}
		
Read back actual velocity of the motor. Communication between the Velocity Control Loop thread and the threads running on the IFM_TILE are carried out over channels: ....

\b IFM_TILE:

	on stdcore[IFM_TILE]: 
			{
				par
				{

- \b Thread: PWM Server.

	do_pwm_inv_triggered(c_pwm_ctrl, c_adctrig, p_ifm_dummy_port, p_ifm_motor_hi, p_ifm_motor_lo, clk_pwm);

Responsible for generating a Pulse-Width Modulation signal that drives the motors. Provided by \b sc_pwm/module_pwm_symmetrical.

- \b Thread: Commutation Server 

	
	{
	hall_par hall_params; //Var definition
	qei_par qei_params;
	commutation_par commutation_params;

	init_hall_param(hall_params); //Initialization
	init_qei_param(qei_params);
	init_commutation_param(commutation_params, hall_params, MAX_NOMINAL_SPEED); 

	commutation_sinusoidal(c_hall_p1,  c_qei_p2, c_signal, c_watchdog, c_commutation_p1,
				c_commutation_p2, c_commutation_p3, c_pwm_ctrl, hall_params,
				qei_params, commutation_params); //Read feedback
	}


Responsible for motor ....

- \b Thread: Hall Server

	{
	hall_par hall_params;
	init_hall_param(hall_params);
	run_hall(c_hall_p1, c_hall_p2, c_hall_p3, c_hall_p4, c_hall_p5,
			p_ifm_hall, hall_params); //Channel priority 1,2..5
	}

Required for BLDC motor commutation  ....

- \b Thread: QEI Server

	{
	qei_par qei_params;
	init_qei_param(qei_params);
	run_qei(c_qei_p1, c_qei_p2, c_qei_p3, c_qei_p4, c_qei_p5,
			p_ifm_encoder, qei_params);  	// channel priority 1,2..5
	}

For high precision information about position for position control loop.

- \b Thread: Watchdog Server

	run_watchdog(c_watchdog, p_ifm_wd_tick, p_ifm_shared_leds_wden);

A watchdog server is used to monitor IFM_TILE and disables motor in case of emergency.

\b Please, do not forget to set properly your node and motor configuration when using this application.

- <a href="">Configure your node</a> 
- \ref how_configure_motors

More information about Velocity Control Server/Client can be found at \ref module_ctrl_loops documentation.

\b Dependencies: \ref sc_pwm/module_pwm_common \ref sc_pwm/module_pwm_symmetrical \ref sc_somanet-base/module_nodeconfig
\ref module_adc \ref module_blocks \ref module_common \ref module_commutation \ref module_ctrl_loops \ref module_hall
\ref module_profile  \ref module_qei \ref module_sm 

\b See \b also:

- <a href="http://doc.synapticon.com/wiki/index.php/Category:Getting_Started_with_SOMANET">Getting started with SOMANET</a>  

*/
